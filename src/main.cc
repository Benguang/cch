#include <assert.h> // for assert()
#include <getopt.h> // for getopt()
#include <stdlib.h> // for abort()
#include <iostream>
#include "version.h" // for build_version

using namespace std;

#include "Tokenizer.h"
#include "Parser.h"

void version() {
    cerr << "CCH (version: " << build_version << ")" << endl <<
        "https://github.com/tjps/cch" << endl;
}

int main(int argc, char** argv) {
    string cchFilename;
    string outputDirectory;
    string ccExtension = "cc", hExtension = "h";
    bool debug = false;
    bool includeBanner = true;
    bool emitLineNumbers = false;
    bool usage = false;

    static struct option long_options[] = {
        {"help", no_argument, 0, 'h'},
        {"debug", no_argument, 0, 'd'},
        {"lineNumbers", no_argument, 0, 'l'},
        {"nobanner", no_argument, 0, 'x'},
        {"input", required_argument, 0, 'i'},
        {"output", required_argument, 0, 'o'},
        {"version", no_argument, 0, 'v'},
        {"ccExtension", required_argument, 0, 1},
        {"hExtension", required_argument, 0, 2},
        {0, 0, 0, 0}
    };

    int optindex = 0;
    for (int c = 0; (c = getopt_long(argc, argv, "hdlxi:o:v",
                                     long_options, &optindex)) != -1; ) {
        switch (c) {
        case 1:   ccExtension = optarg; break;
        case 2:   hExtension = optarg; break;
        case 'd': debug = true; break;
        case 'l': emitLineNumbers = true; break;
        case 'x': includeBanner = false; break;
        case 'i': cchFilename = optarg; break;
        case 'o': outputDirectory = optarg; break;
        case 'v': version(); return 1;
        case 'h':
        default:  usage = true; break;
        }
    }
    if (usage || (optind < argc) || cchFilename.empty() || outputDirectory.empty()) {
        if (optind < argc) {
            cerr << "Unrecognized arguments: ";
            for (int i = optind; i < argc; i++) {
                cerr << argv[i];
            }
            cerr << endl << endl;
        }
        if (usage) {
            version();
        }
        cerr << "Usage: " << argv[0] << endl;
        cerr << fixedIndentation(6,
            "Required:\n"
            "-i <cch>, --input=<cch>  Input CCH file\n"
            "-o <dir>, --output=<dir> Output directory\n"
            "Optional:\n"
            "-d, --debug              Enable debug output\n"
            "-l, --lineNumbers        Emit #line directives\n"
            "-x, --nobanner           Don't add CCH banner to generated files\n"
            "-h, --help               Show this help menu and exit\n"
            "-v, --version            Show program version and exit\n"
            "--ccExtension=<ext>      Set output extension\n"
            "--hExtension=<ext>       Set output extension \n");
        return 1;
    }

    string cch;
    {
        ifstream inputFile(cchFilename.c_str(), ios::in|ios::binary|ios::ate);
        if (!inputFile.good()) {
            cerr << "ERROR: failed to open input: " << cchFilename << endl;
            return 2;
        }
        cch.resize(inputFile.tellg());
        inputFile.seekg(0, ios::beg);
        inputFile.read(&cch[0], cch.size());
    }

    stringstream cc, h;
    {
        ParseContext ctx(cchFilename, &cc, &h, emitLineNumbers);
        BaseTokenizer tokenizer;
        BaseParser parser(&ctx, &tokenizer);

        WrapperParser typeChanger(parser);
        tokenizer.tokenize(cch, &typeChanger);
    }

    string basename = cchFilename;
    if (basename.find_last_of('/') != string::npos) {
        basename = basename.substr(basename.find_last_of('/') + 1);
    }
    if (outputDirectory.size() > 0
        && outputDirectory[outputDirectory.size()-1] != '/') {
        outputDirectory += "/";
    }
    string ccFilename = outputDirectory + basename + "." + ccExtension;
    string hFilename = outputDirectory + basename + "." + hExtension;
    cout << "[CCH] " << cchFilename << " split to { " <<
        hFilename << ", " << ccFilename << " }" << endl;
    if (debug) {
        cout << ".h file:" << endl << h.str() << endl <<
            ".cc file:" << endl << cc.str() << endl;
    } else {
        string banner;
        if (includeBanner) {
            banner = "// Generated by CCH (https://github.com/tjps/cch) (";
            banner += build_version;
            banner += ")";
        }
        writeFile(ccFilename, banner, cc);
        writeFile(hFilename, banner, h);
    }
    return 0;
}
